import Head from "next/head";
import React, { useEffect, useState } from "react";
import axios from "axios";

import styled from "styled-components";
import { AiFillEdit, AiFillDelete } from "react-icons/ai";

import { colors } from "@/config/colors";
import Loader from "@/components/Loader";
import { Field, Form, Formik } from "formik";
import * as Yup from "yup";
import TodoSection from "@/components/TodoSection";

const Title = styled.h1`
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 10px auto 0;
  background-image: linear-gradient(45deg, #111111, #fd7a23);
  background-size: 100%;
  background-repeat: repeat;
  -webkit-background-clip: text;
  background-clip: text;
  text-align: left;
  -webkit-text-fill-color: transparent;
  padding-bottom: 20px;
  font-size: 45px;
`;

const NewTodo = styled.div`
  max-width: 1140px;
  width: 100%;
  margin: 30px auto;
  display: flex;
  align-items: center;
  justify-content: center;
`;

const TodoItems = styled.div`
  max-width: 1140px;
  width: 100%;
  margin: 0 auto;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  gap: 20px;
`;

const TodoID = styled.li`
  list-style-type: none;
  font-size: 16px;
  color: #38598b;
  font-weight: 600;
`;

const Text = styled.li`
  list-style-type: none;
  font-size: 20px;
  color: #113f67;
  font-weight: 600;
`;

export default function Home() {
  const [first, setfirst] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  const [todoId, setTodoId] = useState("");

  const [todoText, setTodoText] = useState("");
  const [isCompleted, setIsCompleted] = useState(false);

  // const [showEdit, setShowEdit] = useState(true);
  const [hasSubmitted, setHasSubmitted] = useState(false);

  const URL = "http://localhost:3001/todo-items";

  const allTodo = () => {
    setIsLoading(true);
    axios
      .get(`${URL}`)
      .then((res) => {
        setfirst(res.data);
        setIsLoading(false);
      })
      .catch((error) => console.error(error));
  };

  useEffect(() => {
    allTodo();
  }, []);

  const updatedTodo = (todoID, isCpmplete) => {
    axios
      .put(`${URL}/${todoID}`, { text: todoText, isCompleted: isCpmplete })
      .then(() => {
        allTodo();
      });
  };

  const deleteTodo = (todoID) => {
    axios.delete(`${URL}/${todoID}`).then(() => {
      allTodo();
    });
  };

  const editHandleChange = (e) => {
    setTodoText(e.target.value);
  };

  const completeTodo = (values) => {
    // updatedTodo(values.id, values.isCompleted);
    axios
      .put(`${URL}/${values.id}`, {
        text: values.text,
        isCompleted: values.isCompleted,
      })
      .then(() => {
        console.log(first);
      });
  };

  const TodoSchema = Yup.object().shape({
    text: Yup.string()
      .min(5, "Text must be 5 char at least")
      .max(50, "Too long")
      .required("Full name is required"),
  });
  console.log(first);

  return (
    <>
      <Head>
        <title>Todo List App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Title>Todo List App</Title>
        <NewTodo>
          <Formik
            initialValues={{
              text: todoText,
            }}
            validationSchema={TodoSchema}
            onSubmit={async (values, { resetForm }) => {
              await axios
                .post(`${URL}`, { text: values.text })
                .then((res) => {
                  allTodo();
                  setHasSubmitted(true);
                  resetForm({ text: "" });
                })
                .catch((error) => console.log(error));
            }}
          >
            {({
              errors,
              touched,
              handleBlur,
              handleChange,
              handleSubmit,
              values,
            }) => (
              <Form>
                <div>{errors.text && touched.text && errors.text}</div>
                <Field
                  name="text"
                  type="text"
                  placeholder="text"
                  onBlur={handleBlur}
                  value={values.text}
                  onChange={(e) => {
                    handleChange(e);
                  }}
                />
                <button
                  type="submit"
                  onClick={(e) => {
                    handleSubmit(e);
                  }}
                >
                  ADD +
                </button>
              </Form>
            )}
          </Formik>
        </NewTodo>
        {isLoading ? (
          <Loader />
        ) : (
          <>
            <TodoItems>
              <h2>My List</h2>
              {first.map((todo) => (
                <React.Fragment key={todo.id}>
                  <TodoSection
                    id={todo.id}
                    text={todo.text}
                    completedTodo={todo.isCompleted}
                    todoText={todoText}
                    setTodoText={setTodoText}
                    deleteTodo={deleteTodo}
                    editHandleChange={editHandleChange}
                    updatedTodo={updatedTodo}
                    completeTodo={completeTodo}
                  />
                </React.Fragment>
              ))}
            </TodoItems>
          </>
        )}
      </main>
    </>
  );
}
