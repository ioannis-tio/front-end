import Head from "next/head";
import { Inter } from "next/font/google";
import { use, useEffect, useState } from "react";
import axios from "axios";

import styled from "styled-components";
import { AiFillEdit, AiFillDelete } from "react-icons/ai";

import { colors } from "@/config/colors";
import Loader from "@/components/Loader";

const Title = styled.h1`
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 10px auto 0;
  background-image: linear-gradient(45deg, #111111, #fd7a23);
  background-size: 100%;
  background-repeat: repeat;
  -webkit-background-clip: text;
  background-clip: text;
  text-align: left;
  -webkit-text-fill-color: transparent;
  padding-bottom: 20px;
  font-size: 45px;
`;

const NewTodo = styled.div`  max-width: 1140px;
width: 100%;
margin: 30px auto;
display: flex;
align-items: center;
justify-content: center;
 `;

const TodoItems = styled.div`
  max-width: 1140px;
  width: 100%;
  margin: 0 auto;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  gap: 20px;
`;

const TODOList = styled.ul`
  color: ${colors.textC};
  background-color: #a2a8d3;
  border-radius: 8px;
  border: 2px solid #233142;
  max-width: 450px;
  width: 100%;
  height: 100px;
  display: flex;
  /* align-items: baseline; */
  flex-direction: row;
  justify-content: space-between; 
  padding: 20px;
`;

const TodoID = styled.li`
  list-style-type: none;
  font-size: 16px;
  color: #38598b;
  font-weight: 600;
`;

const Text = styled.li`
  list-style-type: none;
  font-size: 20px;
  color: #113f67;
  font-weight: 600;
`;

const TODOItems = styled.li`
  list-style-type: none;
  :nth-child(1) {
    font-size: 26px;
    color: #38598b;
    font-weight: 600;
  }
`;

export default function Home() {
  const [first, setfirst] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  const [todoId, setTodoId] = useState("")

  const [text, setText] = useState("");
  const [completed, setCompleted] = useState(null)
  const [isCompleted, setIsCompleted] = useState(false);

  const URL = "http://localhost:3001/todo-items"

  const allTodo = () => {
   setIsLoading(true);
    axios
         .get(`${URL}`)
    .then((res) => {
      setfirst(res.data);
      setIsLoading(false); 
    })
    .catch((error) => console.error(error))
    
    }

  useEffect(() => { allTodo() }, []);

  const newTodo =()=>{
    axios.post(`${URL}`,{text})
  }

  const updateTodo = (todoID)=>{
    axios.patch(`${URL}/${todoID}`)
  }

  const deleteTodo =(todoID)=>{
    axios.delete(`${URL}/${todoID}`).then(()=>{

      allTodo()
    }) 
  }
 
  return (
    <>
      <Head>
        <title>Todo List App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Title>Todo List App</Title>
        <NewTodo>
          <form>
            <section>
              <label for="text">Enter Task</label>
              <input
                type="text"
                placeholder="Enter Task"
                onChange={(e) =>  setText(e.target.value) }
                name="text"
                id="text"
              />
              <label for="comp">Status</label>
              
            </section>
            <button type="submit" onClick={newTodo}>+Add</button>
          </form>
        </NewTodo>
        {isLoading ? (
          <Loader />
        ) : (
          <>
          <TodoItems>
            <h2>My List</h2>
            {first.map((todo) => (
              <TODOList key={todo.id}> 
                <Text >{todo.text}</Text>
                <TODOItems>
                <input type="checkbox"  value={completed} onClick={()=>setCompleted(true)}/>
                  <AiFillEdit size={25} color={"#113f67"} />
                  <AiFillDelete size={25} color={"red"}  onClick={() => {deleteTodo(todo.id)}}/>
                </TODOItems>
              </TODOList>
            ))}
          </TodoItems>
            </>
        )}
      </main>
    </>
  );
}
